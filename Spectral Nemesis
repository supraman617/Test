-- Spectral Nemesis (no slider; Auto Rooms RAW included exactly as provided)
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local library
if RunService:IsStudio() then
	library = require(game:GetService("ReplicatedStorage").ModuleScript)
else
	library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Iliankytb/Iliankytb/main/Zentrix"))()
end

library:CreateWindow({
	Title = "Spectral Nemesis",
	Theme = "Default",
	Icon = 0,
	Intro = true,
	IntroTitle = "Spectral Nemesis",
	KeyPC = Enum.KeyCode.K,
	Data = {
		EnableSavingData = true,
		DisableNotifyingLoadedData = false,
		FolderName = "SpectralNemesis",
		FileName = "MainConfig"
	},
	Discord = {
		Enabled = true,
		DiscordLink = "https://discord.gg/E2TqYRsRP4",
		RememberJoin = true,
		Duration = 10
	},
	KeySystem = true,
	KeySettings = {
		Title = "Spectral Nemesis Key System",
		Note = "the key is SpectralNemesis",
		FileName = "SNKey",
		SaveKey = true,
		GrabKeyFromSite = false,
		Key = {"SpectralNemesis"},
		AddGetKeyButton = false,
		AddDiscordButton = false,
		DiscordLink = "NoInviteLink",
		GetKeyLink = "NoKeyLink"
	}
}, function(window)
	-- Tabs
	local tabMain = window:CreateTab("Main", 0)
	local tabESP = window:CreateTab("ESP", 0)
	local tabEntities = window:CreateTab("Entity Tools", 0)

	-- Colors
	local KeyColor = Color3.fromRGB(255, 255, 0)
	local GeneratorColor = Color3.fromRGB(0, 255, 255)
	local FuseColor = Color3.fromRGB(255, 0, 255)
	local StarVialColor = Color3.fromRGB(0, 255, 128)
	local TimerLeverColor = Color3.fromRGB(255, 140, 0)

	-- States
	local KeyESPEnabled = false
	local GeneratorESPEnabled = false
	local FuseESPEnabled = false
	local StarVialESPEnabled = false
	local TimerLeverESPEnabled = false

	local AntiEyesEnabled = false
	local EntityNotifierEnabled = true

	-- Highlights tables
	local KeyHighlights = {}
	local GeneratorHighlights = {}
	local FuseHighlights = {}
	local StarVialHighlights = {}
	local TimerLeverHighlights = {}

	-- highlight helpers
	local function createHighlightFallback(targetInst, color, map)
		if not targetInst then return nil end
		if map and map[targetInst] then
			local ex = map[targetInst]
			if ex and ex:IsA("Highlight") then
				ex.FillColor = color
				ex.OutlineColor = color
				return ex
			end
		end
		local existing = targetInst:FindFirstChild("Spectral_Highlight")
		if existing and existing:IsA("Highlight") then
			existing.FillColor = color
			existing.OutlineColor = color
			if map then map[targetInst] = existing end
			return existing
		end
		local adornee = targetInst
		if not adornee:IsA("Model") and not adornee:IsA("BasePart") then
			for _, d in ipairs(targetInst:GetDescendants()) do
				if d:IsA("BasePart") then
					adornee = d
					break
				end
			end
		end
		local h = Instance.new("Highlight")
		h.Name = "Spectral_Highlight"
		h.Adornee = adornee
		h.FillColor = color
		h.FillTransparency = 0.6
		h.OutlineColor = color
		h.OutlineTransparency = 0
		h.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
		h.Parent = targetInst
		if map then map[targetInst] = h end
		return h
	end

	local function removeHighlight(map, inst)
		if not inst then return end
		if map and map[inst] then
			pcall(function()
				if map[inst] and map[inst].Destroy then map[inst]:Destroy() end
			end)
			map[inst] = nil
		end
		pcall(function()
			local h = inst:FindFirstChild("Spectral_Highlight")
			if h then h:Destroy() end
		end)
	end

	-- scan current rooms and apply/remove highlights
	local function scanCurrentRoomsOnce()
		if not Workspace:FindFirstChild("CurrentRooms") then return end
		for _, room in pairs(Workspace.CurrentRooms:GetChildren()) do
			local assets = room:FindFirstChild("Assets")
			if assets then
				local key = assets:FindFirstChild("KeyObtain")
				if key then
					if KeyESPEnabled then createHighlightFallback(key, KeyColor, KeyHighlights) else removeHighlight(KeyHighlights, key) end
				end
				local gen = assets:FindFirstChild("MinesGenerator")
				if gen then
					if GeneratorESPEnabled then createHighlightFallback(gen, GeneratorColor, GeneratorHighlights) else removeHighlight(GeneratorHighlights, gen) end
				end
				local fuse = assets:FindFirstChild("Fuse")
				if fuse then
					if FuseESPEnabled then createHighlightFallback(fuse, FuseColor, FuseHighlights) else removeHighlight(FuseHighlights, fuse) end
				end
				local star = assets:FindFirstChild("StarVial")
				if star then
					if StarVialESPEnabled then createHighlightFallback(star, StarVialColor, StarVialHighlights) else removeHighlight(StarVialHighlights, star) end
				end
				local tlever = assets:FindFirstChild("TimerLever")
				if tlever then
					if TimerLeverESPEnabled then createHighlightFallback(tlever, TimerLeverColor, TimerLeverHighlights) else removeHighlight(TimerLeverHighlights, tlever) end
				end
			end
		end
	end

	-- Entity Notifier (A-60/A-120 corrected to A60/A120)
	local EntitiesToNotify = {
		["RushMoving"] = "Rush Has Spawned!",
		["AmbushMoving"] = "Ambush Has Spawned!",
		["BackdoorRush"] = "Blitz Has Spawned!",
		["GlitchRush"] = "Glitch Rush Has Spawned!",
		["GlitchAmbush"] = "Glitch Ambush Has Spawned!",
		["SallyRig"] = "Sally Has Spawned!",
		["GlitchCube"] = "Glitch Fragment Has Spawned!",
		["A60"] = "A60 Has Spawned!",
		["A120"] = "A120 Has Spawned!",
		["Eyes"] = "Eyes Has Spawned!",
		["Lookman"] = "Lookman Has Spawned!"
	}

	Workspace.ChildAdded:Connect(function(child)
		if EntityNotifierEnabled and EntitiesToNotify[child.Name] then
			window:Notify({Title = "Entity Alert", Message = EntitiesToNotify[child.Name], Duration = 5})
		end
	end)

	-- Anti-Eyes
	local EyesConn = nil
	local function startAntiEyes()
		if EyesConn then
			pcall(function() EyesConn:Disconnect() end)
			EyesConn = nil
		end
		EyesConn = RunService.Heartbeat:Connect(function()
			if not AntiEyesEnabled then return end
			for _, obj in ipairs(Workspace:GetDescendants()) do
				if obj and obj.Name == "Eyes" then
					for _, d in ipairs(obj:GetDescendants()) do
						if d and d.Name == "MotorReplication" then
							pcall(function()
								if d:IsA("BoolValue") then
									d.Value = false
								elseif d:IsA("IntValue") or d:IsA("NumberValue") then
									d.Value = 0
								end
							end)
						end
					end
				end
			end
		end)
	end
	local function stopAntiEyes()
		if EyesConn then
			pcall(function() EyesConn:Disconnect() end)
			EyesConn = nil
		end
	end

	-- ESP toggles
	tabESP:AddToggle({Text = "ESP Key (CurrentRooms)", Name = "KeyESPToggle", Flag = "KeyESPToggle", Default = false, Callback = function(state) KeyESPEnabled = state scanCurrentRoomsOnce() end})
	tabESP:AddToggle({Text = "ESP Generator (CurrentRooms)", Name = "GeneratorESPToggle", Flag = "GeneratorESPToggle", Default = false, Callback = function(state) GeneratorESPEnabled = state scanCurrentRoomsOnce() end})
	tabESP:AddToggle({Text = "ESP Fuse (CurrentRooms)", Name = "FuseESPToggle", Flag = "FuseESPToggle", Default = false, Callback = function(state) FuseESPEnabled = state scanCurrentRoomsOnce() end})
	tabESP:AddToggle({Text = "ESP StarVial (CurrentRooms)", Name = "StarVialESPToggle", Flag = "StarVialESPToggle", Default = false, Callback = function(state) StarVialESPEnabled = state scanCurrentRoomsOnce() end})
	tabESP:AddToggle({Text = "ESP TimerLever (CurrentRooms)", Name = "TimerLeverESPToggle", Flag = "TimerLeverESPToggle", Default = false, Callback = function(state) TimerLeverESPEnabled = state scanCurrentRoomsOnce() end})

	-- Entity tools toggles
	tabEntities:AddToggle({Text = "Anti Eyes (Simple)", Name = "AntiEyesToggle", Flag = "AntiEyesToggle", Default = false, Callback = function(state) AntiEyesEnabled = state if state then startAntiEyes() else stopAntiEyes() end end})
	tabEntities:AddToggle({Text = "Entity Notifier", Name = "EntityNotifierToggle", Flag = "EntityNotifierToggle", Default = true, Callback = function(state) EntityNotifierEnabled = state end})

	-- =========================
	-- Auto Rooms (RAW) â€” exact code provided by user, NOT MODIFIED
	-- stored as a raw string and executed when the toggle is enabled
	-- =========================
	local autoRoomsRaw = [[
-- Made by geodude#0001 / darealgeo
-- Thanks lolcat, kardin!

if game.PlaceId ~= 6839171747 or game.ReplicatedStorage.GameData.Floor.Value ~= "Rooms" then
	game.StarterGui:SetCore("SendNotification", { Title = "Invalid Place"; Text = "The game detected appears to not be rooms. Please execute this while in rooms!" })
	
	local Sound = Instance.new("Sound")
	Sound.Parent = game.SoundService
	Sound.SoundId = "rbxassetid://89689834367434"
	Sound.Volume = 5
	Sound.PlayOnRemove = true
	Sound:Destroy()
	
	return
elseif workspace:FindFirstChild("PathFindPartsFolder") then
	return
end

local PathfindingService = game:GetService("PathfindingService")
local VirtualInputManager = game:GetService('VirtualInputManager')
local LocalPlayer = game.Players.LocalPlayer
local LatestRoom = game.ReplicatedStorage.GameData.LatestRoom

local Cooldown = false

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game.CoreGui

local TextLabel = Instance.new("TextLabel")
TextLabel.Parent = ScreenGui

TextLabel.Size = UDim2.new(0,350,0,100)
TextLabel.TextSize = 48
TextLabel.TextStrokeColor3 = Color3.new(1,1,1)
TextLabel.TextStrokeTransparency = 0
TextLabel.BackgroundTransparency = 1

local GC = getconnections or get_signal_cons
if GC then
    for i,v in pairs(GC(LocalPlayer.Idled)) do
        if v["Disable"] then
            v["Disable"](v)
        elseif v["Disconnect"] then
            v["Disconnect"](v)
        end
    end
end

local Folder = Instance.new("Folder")
Folder.Parent = workspace
Folder.Name = "PathFindPartsFolder"

if LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.RemoteListener.Modules:FindFirstChild("A90") then
    LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.RemoteListener.Modules.A90.Name = "lol" -- Fuck you A90
end

function getLocker()
    local Closest

    for i,v in pairs(workspace.CurrentRooms:GetDescendants()) do
        if v.Name == "Rooms_Locker" then
            if v:FindFirstChild("Door") and v:FindFirstChild("HiddenPlayer") then
                if v.HiddenPlayer.Value == nil then
                    if v.Door.Position.Y > -3 then -- Prevents going to the lower lockers in the room with the bridge 
                        if Closest == nil then
                            Closest = v.Door
                        else
                            if (LocalPlayer.Character.HumanoidRootPart.Position - v.Door.Position).Magnitude < (Closest.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude then
                                Closest = v.Door
                            end
                        end
                    end
                end
            end
        end
    end
    return Closest
end

function getPath()
    local Part
	
    local Entity = workspace:FindFirstChild("A60") or workspace:FindFirstChild("A120")
    if Entity and Entity.Main.Position.Y > -4 then
        Part = getLocker()
    else
        Part = workspace.CurrentRooms[LatestRoom.Value].Door.Door
    end
    return Part
end

LatestRoom:GetPropertyChangedSignal("Value"):Connect(function()
    TextLabel.Text = "Room: "..math.clamp(LatestRoom.Value, 1,1000)

    if LatestRoom.Value ~= 1000 then
        LocalPlayer.DevComputerMovementMode = Enum.DevComputerMovementMode.Scriptable
    else
        LocalPlayer.DevComputerMovementMode = Enum.DevComputerMovementMode.KeyboardMouse
	
        Folder:ClearAllChildren()
    
        local Sound = Instance.new("Sound")
        Sound.Parent = game.SoundService
        Sound.SoundId = "rbxassetid://89689834367434"
        Sound.Volume = 3
        Sound.PlayOnRemove = true
        Sound:Destroy()
        
        game.StarterGui:SetCore("SendNotification", { Title = "youtube.com/geodudee"; Text = "Thank you for using my script!" })
        return
    end
end)

game:GetService("RunService").RenderStepped:connect(function()
    LocalPlayer.Character.HumanoidRootPart.CanCollide = false
    LocalPlayer.Character.Collision.CanCollide = false
    LocalPlayer.Character.Collision.CustomPhysicalProperties = PhysicalProperties.new(9e9,9e9,9e9)

    LocalPlayer.Character.Humanoid.WalkSpeed = 45

    local Path = getPath()
    
    local Entity = workspace:FindFirstChild("A60") or workspace:FindFirstChild("A120")
    if Entity then
        if Path then
            if Path.Parent.Name == "Rooms_Locker" then
                if Entity.Main.Position.Y > -4 then
                    if (LocalPlayer.Character.HumanoidRootPart.Position - Path.Position).Magnitude < 5 then
                        if LocalPlayer.Character.HumanoidRootPart.Anchored == false then
                            fireproximityprompt(Path.Parent.HidePrompt)
                        end
                    end
                end
            end
        end
        if Entity.Main.Position.Y < -4 then
            if LocalPlayer.Character.HumanoidRootPart.Anchored == true then
                game.ReplicatedStorage.RemotesFolder.CamLock:FireServer()
            end
        end
    else
        if LocalPlayer.Character.HumanoidRootPart.Anchored == true then
            game.ReplicatedStorage.RemotesFolder.CamLock:FireServer()
        end
    end
end)

while true do

    local Destination = getPath()

    local path = PathfindingService:CreatePath({ WaypointSpacing = 2, AgentRadius = 0.6, AgentCanJump = false })
    path:ComputeAsync(LocalPlayer.Character.HumanoidRootPart.Position - Vector3.new(0,2.5,0), Destination.Position)
    local Waypoints = path:GetWaypoints()

    if path.Status ~= Enum.PathStatus.NoPath then

        Folder:ClearAllChildren()

        for _, Waypoint in pairs(Waypoints) do
            local part = Instance.new("Part")
            part.Size = Vector3.new(1,1,1)
            part.Position = Waypoint.Position
            part.Shape = "Cylinder"
            part.Rotation = Vector3.new(0,0,90)
            part.Material = "SmoothPlastic"
            part.Anchored = true
            part.CanCollide = false
            part.Parent = Folder
        end

        for _, Waypoint in pairs(Waypoints) do
            if LocalPlayer.Character.HumanoidRootPart.Anchored == false then
                LocalPlayer.Character.Humanoid:MoveTo(Waypoint.Position)
                LocalPlayer.Character.Humanoid.MoveToFinished:Wait()
            end
        end
    end
end
]]

	-- control for running the raw code
	local autoRoomsCoroutine = nil

	tabMain:AddToggle({
		Text = "Auto Rooms (RAW)",
		Name = "AutoRoomsRawToggle",
		Flag = "AutoRoomsRawToggle",
		Default = false,
		Callback = function(state)
			if state then
				local ok, fn = pcall(loadstring, autoRoomsRaw)
				if ok and type(fn) == "function" then
					autoRoomsCoroutine = coroutine.create(function() pcall(fn) end)
					local suc, err = pcall(coroutine.resume, autoRoomsCoroutine)
					if suc then
						window:Notify({Title = "Spectral Nemesis", Message = "Auto Rooms (RAW) started", Duration = 5})
					else
						window:Notify({Title = "Spectral Nemesis", Message = "Auto Rooms started but returned error", Duration = 5})
					end
				else
					window:Notify({Title = "Spectral Nemesis", Message = "Failed to load Auto Rooms (RAW)", Duration = 6})
				end
			else
				if autoRoomsCoroutine then
					if coroutine.close then
						pcall(coroutine.close, autoRoomsCoroutine)
					end
					autoRoomsCoroutine = nil
				end
				window:Notify({Title = "Spectral Nemesis", Message = "Auto Rooms (RAW) toggle off (may not stop a running script).", Duration = 6})
			end
		end
	})

	-- load saved toggles / data
	library:LoadData()
end)
